 Sistemas de controle de versões 

* Git Bash => Fornece comandos do Linux
$ ls => Mostra todas as pastas e arquivos
$ git --version => diz a versão do Git
$ git config --local user.name "Seu nome aqui" => Nome do autor que irá fazer as alterações no arquivos
$ git config --local user.email "seu@email.aqui" => Email do autor que irá fazer as alterações no arquivos
$ git init => Transforma a pasta atual em repositório
$ git config --list --local => Confere 
$ git status => Mostra o estado do repositório ou quais arquivos foram alterados
* On branch master => ramo ou branch
$ git add <Nome do arquivo > => Adciona 1 arquivo específico no Git ou inclui arquivos no commits, que passa a monitorar.
$ git add . ou git add -A => Adciona todos os arquivos no Git
$ git commit -m "nome da alteração + detalhes se quiser"(commit) => Salva a alteração recente e indica mudanças como um "check point"
* Changes to committed => mudanças a serem commitadas
$ git rm => remove o arquivo recém adcionado deixando de ser monitorado.
* HEAD => Estado atual do nosso código, onde o Git os colocou.
* Working tree => Local onde os arquivos estão sendo editados.
* index => Local onde o git armazena o que será commitado ou local entre a working tree e o repositório Git em si.
$ git log => Vê o histórico de alterações.
* hash do commit => uma identificação única de cada commit
$ git config --local user.name "nome alterado" => Configuração para cada projeto
$ git config --global => para máquina toda
$ git config user.email => visualisa as configurações de email
$ git config user.name => visualisa as configurações do nome
$ git log --oneline => visualisa as alterações resumida em uma única linha
$ git log -p => visualisa as alterações detalhada, inclusive códigos ou escrita que era antes e mostra como ficou depois
$ git log --pretty="format:%H" => comando que nos traz apenas o hash
$ git log --pretty="format:%h %s" => traz o hash resumido seguido pela mensagem do commit
$ git log --help => exibe página manual de git-log
* .gitignore => Arquivo criado na mesma pasta do projeto, em que ignora os arquivos ou pastas nos commits. Para isso, coloca-se o nome do arquivo ou pasta + uma barra no final dentro do ".gitignore"
$ cd .. => Volta uma pasta acima da pasta do projeto
$ mkdir => Cria uma pasta --> detalhe: coloque o nome da pasta logo após o comando
$ cd + nome da pasta + uma barra no final => Acessa a pasta
$ git init --bare => Cria repositório onde fica somente as alterações dos arquivos e não uma cópia de cada.
* --bare => parâmetro
$ git remote => lista todos os repositórios remotos
$ git remote add + nome escolhido esse repositório remoto + o caminho onde ele fica(pasta com os arquivos)
$ git remote -v => Mostra o endereço do local

IMPORTANTE! Ler esse artigo no final curso. Como forma de revisão.

Documentação degit init instrução de uso do Git no site do GitHub => https://training.github.com/downloads/pt_BR/github-git-cheat-sheet/

Dica! Nunca devo comitar códigos imcompletos ou que não funciona.